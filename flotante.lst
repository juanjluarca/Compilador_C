     1                                  ; Manejo de valores de coma flotante
     2                                  ; 21 abr 2025
     3                                  ; Compilar: nasm -f elf64 flotante.asm -l flotante.lst
     4                                  ; link: gcc -m64 flotante.o -o flotante -no-pie
     5                                  
     6                                  extern printf
     7                                  
     8                                  SECTION .data
     9 00000000 6E861BF0F9210940            pi          dq       3.14159
    10 00000008 0000000000001440            diametro    dq      5.0
    11 00000010 43203D207069202A20-         format      db      "C = pi * d = %f * %f = %f", 10, 0
    11 00000019 64203D202566202A20-
    11 00000022 2566203D2025660A00 
    12                                  
    13                                  SECTION .bss
    14 00000000 ????????????????            c:          resq    1
    15                                  
    16                                  SECTION .text
    17                                      global main
    18                                  
    19                                  main:
    20 00000000 55                          push    rbp     
    21 00000001 DD0425[08000000]            fld     qword [diametro]   ; carga el radio al registro ST0
    22 00000008 DC0C25[00000000]            fmul    qword [pi]         ; diametro * pi
    23 0000000F DD1C25[00000000]            fstp    qword [c]          ; guarda el resultado de ST0 en c
    24                                      ;------------- llamada a printf ------------------
    25 00000016 48BF-                       mov     rdi, format        ; cargar la cadena formateada
    25 00000018 [1000000000000000] 
    26 00000020 F30F7E0425-                 movq    xmm0, qword [pi]
    26 00000025 [00000000]         
    27 00000029 F30F7E0C25-                 movq    xmm1, qword [diametro]
    27 0000002E [08000000]         
    28 00000032 F30F7E1425-                 movq    xmm2, qword [c]
    28 00000037 [00000000]         
    29 0000003B B803000000                  mov     rax, 3
    30 00000040 E8(00000000)                call printf
    31                                  
    32 00000045 5D                          pop rbp
    33 00000046 B801000000                  mov rax, 1
    34 0000004B 4831DB                      xor rbx, rbx
    35 0000004E CD80                        int 80h
    36                                  
    37                                  
